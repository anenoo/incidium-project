import { readFileSync, createReadStream } from "node:fs";
import path from "node:path";
import test from "ava";
import { convertCSVFile } from "../convertMatrix.js";
import { EOL } from "node:os";
for (const dataFileName of ["info", "info2"]) {
    test(`Data File '${dataFileName}'`, async (t) => {
        const transformedChunks = await new Promise((resolve) => {
            const chunks = [];
            convertCSVFile(createReadStream(path.join("fixtures", `${dataFileName}.input`), {
                encoding: "utf8",
                autoClose: true,
                flags: "r",
            }))
                .on("data", (data) => {
                chunks.push(data + EOL);
            })
                .on("end", () => {
                resolve(chunks);
            });
        });
        t.deepEqual(transformedChunks.join(''), readFileSync(path.join("fixtures", `${dataFileName}.output`), {
            encoding: "utf8",
            flag: "r",
        }));
    });
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29udmVydC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy90ZXN0L2NvbnZlcnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFlBQVksRUFBRSxnQkFBZ0IsRUFBRSxNQUFNLFNBQVMsQ0FBQztBQUN6RCxPQUFPLElBQUksTUFBTSxXQUFXLENBQUM7QUFDN0IsT0FBTyxJQUFJLE1BQU0sS0FBSyxDQUFDO0FBQ3ZCLE9BQU8sRUFBRSxjQUFjLEVBQUUsTUFBTSxxQkFBcUIsQ0FBQztBQUNyRCxPQUFPLEVBQUUsR0FBRyxFQUFFLE1BQU0sU0FBUyxDQUFDO0FBRTlCLEtBQUssTUFBTSxZQUFZLElBQUksQ0FBQyxNQUFNLEVBQUUsT0FBTyxDQUFDLEVBQUU7SUFDNUMsSUFBSSxDQUFDLGNBQWMsWUFBWSxHQUFHLEVBQUUsS0FBSyxFQUFFLENBQUMsRUFBRSxFQUFFO1FBQzlDLE1BQU0saUJBQWlCLEdBQUcsTUFBTSxJQUFJLE9BQU8sQ0FDekMsQ0FBQyxPQUFPLEVBQUUsRUFBRTtZQUNWLE1BQU0sTUFBTSxHQUFhLEVBQUUsQ0FBQztZQUU1QixjQUFjLENBQ1osZ0JBQWdCLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxVQUFVLEVBQUUsR0FBRyxZQUFZLFFBQVEsQ0FBQyxFQUFFO2dCQUMvRCxRQUFRLEVBQUUsTUFBTTtnQkFDaEIsU0FBUyxFQUFFLElBQUk7Z0JBQ2YsS0FBSyxFQUFFLEdBQUc7YUFDWCxDQUFDLENBQ0g7aUJBQ0UsRUFBRSxDQUFDLE1BQU0sRUFBRSxDQUFDLElBQUksRUFBRSxFQUFFO2dCQUNuQixNQUFNLENBQUMsSUFBSSxDQUFDLElBQUksR0FBRyxHQUFHLENBQUMsQ0FBQztZQUMxQixDQUFDLENBQUM7aUJBQ0QsRUFBRSxDQUFDLEtBQUssRUFBRSxHQUFHLEVBQUU7Z0JBQ2QsT0FBTyxDQUFDLE1BQU0sQ0FBQyxDQUFDO1lBQ2xCLENBQUMsQ0FBQyxDQUFDO1FBQ1AsQ0FBQyxDQUNGLENBQUM7UUFFRixDQUFDLENBQUMsU0FBUyxDQUNULGlCQUFpQixDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsRUFDMUIsWUFBWSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsVUFBVSxFQUFFLEdBQUcsWUFBWSxTQUFTLENBQUMsRUFBRTtZQUM1RCxRQUFRLEVBQUUsTUFBTTtZQUNoQixJQUFJLEVBQUUsR0FBRztTQUNWLENBQUMsQ0FDSCxDQUFDO0lBQ0osQ0FBQyxDQUFDLENBQUM7Q0FDSiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IHJlYWRGaWxlU3luYywgY3JlYXRlUmVhZFN0cmVhbSB9IGZyb20gXCJub2RlOmZzXCI7XG5pbXBvcnQgcGF0aCBmcm9tIFwibm9kZTpwYXRoXCI7XG5pbXBvcnQgdGVzdCBmcm9tIFwiYXZhXCI7XG5pbXBvcnQgeyBjb252ZXJ0Q1NWRmlsZSB9IGZyb20gXCIuLi9jb252ZXJ0TWF0cml4LmpzXCI7XG5pbXBvcnQgeyBFT0wgfSBmcm9tIFwibm9kZTpvc1wiO1xuXG5mb3IgKGNvbnN0IGRhdGFGaWxlTmFtZSBvZiBbXCJpbmZvXCIsIFwiaW5mbzJcIl0pIHtcbiAgdGVzdChgRGF0YSBGaWxlICcke2RhdGFGaWxlTmFtZX0nYCwgYXN5bmMgKHQpID0+IHtcbiAgICBjb25zdCB0cmFuc2Zvcm1lZENodW5rcyA9IGF3YWl0IG5ldyBQcm9taXNlPHJlYWRvbmx5IHN0cmluZ1tdPihcbiAgICAgIChyZXNvbHZlKSA9PiB7XG4gICAgICAgIGNvbnN0IGNodW5rczogc3RyaW5nW10gPSBbXTtcblxuICAgICAgICBjb252ZXJ0Q1NWRmlsZShcbiAgICAgICAgICBjcmVhdGVSZWFkU3RyZWFtKHBhdGguam9pbihcImZpeHR1cmVzXCIsIGAke2RhdGFGaWxlTmFtZX0uaW5wdXRgKSwge1xuICAgICAgICAgICAgZW5jb2Rpbmc6IFwidXRmOFwiLFxuICAgICAgICAgICAgYXV0b0Nsb3NlOiB0cnVlLFxuICAgICAgICAgICAgZmxhZ3M6IFwiclwiLFxuICAgICAgICAgIH0pXG4gICAgICAgIClcbiAgICAgICAgICAub24oXCJkYXRhXCIsIChkYXRhKSA9PiB7XG4gICAgICAgICAgICBjaHVua3MucHVzaChkYXRhICsgRU9MKTtcbiAgICAgICAgICB9KVxuICAgICAgICAgIC5vbihcImVuZFwiLCAoKSA9PiB7XG4gICAgICAgICAgICByZXNvbHZlKGNodW5rcyk7XG4gICAgICAgICAgfSk7XG4gICAgICB9XG4gICAgKTtcblxuICAgIHQuZGVlcEVxdWFsKFxuICAgICAgdHJhbnNmb3JtZWRDaHVua3Muam9pbignJyksXG4gICAgICByZWFkRmlsZVN5bmMocGF0aC5qb2luKFwiZml4dHVyZXNcIiwgYCR7ZGF0YUZpbGVOYW1lfS5vdXRwdXRgKSwge1xuICAgICAgICBlbmNvZGluZzogXCJ1dGY4XCIsXG4gICAgICAgIGZsYWc6IFwiclwiLFxuICAgICAgfSlcbiAgICApO1xuICB9KTtcbn1cbiJdfQ==